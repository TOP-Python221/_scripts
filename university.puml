@startuml
'skinparam groupInheritance 3

enum Sex {
    MALE
    FEMALE
}
hide Sex empty members

enum Degree {
    BACHELOR
    MASTER
    DOCTOR
}
hide Degree empty members

enum EducationForms {
    INTRAMURAL
    EXTRAMURAL
    REMOTE
}
hide EducationForms empty members


class Person {
    +name: str
    +birthdate: date
    +sex
    __init__(name, birthdate, sex)
}

class Employee {
    +employment_date: date
    +position: str
    +salary: int
    .. getters ..
    +annual_income
    __
    __init__(name, birthdate, sex, \n\t\tposition, salary)
    +index_salary(percent: float): None
}

class ProfessionalEmployee {
    +degree = Degree.BACHELOR
    +experience: int = 0
    __init__(name, birthdate, sex, position, salary, degree, experience)
    +years_of_experience(): int
}

class Teacher {
    +professorship: bool = False
    -courses: list[str] = []
    __init__(name, birthdate, sex, position, salary, \n\t\tdegree, professorship, experience)
    __str__()
    +add_course(course_name: str)
    +rem_course(course_name: str)
}

class Researcher {
    degree = Degree.MASTER
    __init__(name, birthdate, sex, \n\t\tposition, salary, degree)
    __str__()
}

class GeneralPersonnel
GeneralPersonnel : __str__()

class SecurityPersonnel
SecurityPersonnel : __str__()

class Administrator {
    +supervisor: Administrator
    +subordinates: list[Employee] = []
    __init__(name, birthdate, sex, position, \n\t\tsalary, supervisor)
    __str__()
}

class Student {
    +form = EducationForms.INTRAMURAL
    +year: int = 1
    +average_grade: float = -1
    __init__(name, birthdate, sex, form, \n\t\tyear, average_grade)
    __str__()
    +year_increment()
}


class OrganizationLevel {
    +name: str
    -head: Administrator
    -employees: list[Employee]
    +address: str
    #budget: int
    __init__(name, head, address)
    __str__()
    +change_head(Administrator)
    +hire_employee(Employee)
    +fire_employee(Employee)
    +set_annual_budget(amount: int)
}

class University {
    -institutes: dict[str, Institute]
    __str__()
    +add_institute(Institute)
    +rem_institute(Institute)
}

class Institute {
    -departments: dict[str, Department]
    __str__()
    +add_department(Department)
    +rem_department(Department)
}

class Department {
    -groups: dict[str, Group]
    __str__()
    +add_group(Group)
    +rem_group(Group)
}


abstract list
class Group {
    +id: str
    +specialty: str
    __str__()
}
hide list empty members


OrganizationLevel <|-- University
OrganizationLevel <|-- Institute
OrganizationLevel <|-- Department

University::institutes *-- Institute
Institute::departments *-- Department
Department::groups *-- Group

OrganizationLevel::head *-- Administrator
OrganizationLevel::employees *-- Employee

Group --|> list
Group *-- Student

Person::sex *-- Sex
Person <|-- Employee
Employee <|-- Administrator
Employee <|-- ProfessionalEmployee
Employee <|-- SecurityPersonnel
Employee <|-- GeneralPersonnel
ProfessionalEmployee <|-- Teacher
ProfessionalEmployee <|-- Researcher
Person <|-- Student

Teacher::degree *-- Degree
Researcher::degree *-- Degree

Administrator::supervisor *-- Administrator
Administrator::subordinates *-- Employee

Student::form *-- EducationForms

@enduml